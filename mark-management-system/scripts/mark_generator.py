import typer
import csv

from faker import Faker

from typing import Dict, List, Final
from random import normalvariate, randint, choice
from datetime import datetime
from typing_extensions import Annotated


faker = Faker()

MU: Final[int] = 65
SIGMA: Final[int] = 10
DP: Final[int] = 0


class MarkGenerator:
    """This class is responsible for generating the sample data.

    Attributes:
        data: The list containing the data.
    """
    def __init__(self):
        self.LOWER_MARK_BOUND = 0
        self.UPPER_MARK_BOUND = 100
        self.data: List = []

    def generate_data(self, class_code: str, num_students: int) -> None:
        """Generate the data given a class code & numbers of students for that class.

        Args:
            class_code: A string representing the class code.
            num_students: An integer representing the amount of students taking the class.
        """
        mark_codes_absent: List[str] = ["ABS", "EN", "UM"]
        mark_codes_present: List[str] = ["EX", "FO", "IA", "PM"]

        for _ in range(num_students):
            mark_code, generated_mark = "", ""

            if randint(1, 100) <= 2:
                mark_code = choice(mark_codes_absent + mark_codes_present)

            if mark_code in mark_codes_absent:
                generated_mark = ""
            else:
                generated_mark = int(round(normalvariate(MU, SIGMA), DP))
                generated_mark = str(generated_mark) if self.LOWER_MARK_BOUND <= generated_mark <= self.UPPER_MARK_BOUND else "100"

            student_data = {
                "CLASS_CODE": class_code,
                "REG_NO": f"{faker.random_lowercase_letter()}{faker.random_lowercase_letter()}{faker.random_lowercase_letter()}{faker.random_number(5)}",
                "STUDENT_NAME": faker.first_name() + " " + faker.last_name(),
                "DEGREE_LEVEL": "BSc (Hons)",
                "DEGREE_NAME": "Computer Science",
            }
            
            if generated_mark:
                student_data["MARK"] = generated_mark

            if mark_code:
                student_data["MARK_CODE"] = mark_code

            self.data.append(student_data)

class CSVWriter:
    """This class is responsible for writing the sample data to a file. """
    def write_to_csv(self, data: List[Dict[str, str]], file_name: str) -> None:
        """Writes the data generated by `MarkGenerator` into a CSV file.

        Args:
            data: A list containing all of the generated data.
            file_name: The file name to be written to (or created and then written to).
        """

        keys: List[str] = [
            "CLASS_CODE",
            "REG_NO",
            "STUDENT_NAME",
            "DEGREE_LEVEL",
            "DEGREE_NAME",
            "MARK",
            "MARK_CODE"
        ]

        with open(file_name, "w", newline="") as file:
            dict_writer = csv.DictWriter(file, fieldnames=keys)
            dict_writer.writeheader()
            dict_writer.writerows(data)

            file.truncate(file.truncate() - 2) 

    @staticmethod
    def generate_filename() -> str:
        """Generate a filename of format: mms_marks_<timestamp>

        Returns:
            The filename to be used for the CSV file.
        """

        timestamp = datetime.now().strftime("%Y%m%d%H%M%S")
        return f"mms_marks_{timestamp}.csv"

class PSQLInsertGenerator:
    """This class is responsible for generating a PostgreSQL insert statement for the user. """
    @staticmethod
    def generate_insert_statements(data: List[Dict[str, str]]) -> str:
        insert_statements = [
            f"INSERT INTO students (reg_no, student_name, year, degree_id) VALUES ('{item['REG_NO']}', '{item['STUDENT_NAME']}', 1, 1);"
            for item in data
        ]

        return "\n".join(insert_statements)

def main(
        class_code: Annotated[str, typer.Argument()] = "CS408",
        num_students: Annotated[int, typer.Argument()] = 100
    ) -> None:
    mark_generator = MarkGenerator()
    mark_generator.generate_data(class_code, num_students)

    csv_writer = CSVWriter()
    file_name = csv_writer.generate_filename()
    csv_writer.write_to_csv(mark_generator.data, file_name)

    psql_insert_generator = PSQLInsertGenerator()
    insert_statement = psql_insert_generator.generate_insert_statements(mark_generator.data)
    print(insert_statement)


if __name__ == "__main__":
    typer.run(main)
